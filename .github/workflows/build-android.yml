name: Build libhighs for Android

on:
  workflow_dispatch:
  push:
    paths:
      - "CMakeLists.txt"
      - "cmake/**"
      - ".github/workflows/build-android.yml"
      - "highs/**"
      - "build_scripts/**"
      - "build.py"

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  PYTHON_VERSION: "3.11"
  BUILD_CONFIG: "Release"
  PACKAGE_NAME: "dart-highs-prebuilt-lib-android"
  BUNDLE_PACKAGE_NAME: "android-jni-libs-bundle"

jobs:
  build:
    name: Android (${{ matrix.platform }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        platform: [android-arm64, android-arm32, android-x64, android-x86]
        include:
          - platform: android-arm64
            abi: arm64-v8a
          - platform: android-arm32
            abi: armeabi-v7a
          - platform: android-x64
            abi: x86_64
          - platform: android-x86
            abi: x86
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Setup JDK (required by NDK)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
          add-to-path: true

      - name: Build platform using build script
        run: |
          python build.py build ${{ matrix.platform }} \
            --ndk-path $ANDROID_NDK_ROOT \
            --config ${{ env.BUILD_CONFIG }} \
            --extract-libs

      - name: Upload library artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: highs_patched/build-${{ matrix.platform }}/libhighs.so

  package-individual:
    name: Package Individual Android Libraries
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: List downloaded artifacts
        run: find _artifacts -type f -name "*.so" | sort

      - name: Package individual libraries
        run: |
          mkdir -p pkg-individual/android
          
          # Copy individual platform libraries
          cp -r _artifacts/android-arm64 pkg-individual/android/
          cp -r _artifacts/android-arm32 pkg-individual/android/
          cp -r _artifacts/android-x64 pkg-individual/android/
          cp -r _artifacts/android-x86 pkg-individual/android/
          
          # Create zip for individual libraries
          (cd pkg-individual && zip -r ../${{ env.PACKAGE_NAME }}-individual.zip .)

      - name: Upload individual package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-individual
          path: ${{ env.PACKAGE_NAME }}-individual.zip

  package-bundle:
    name: Package Android JNI Bundle
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Package JNI bundle
        run: |
          mkdir -p pkg-bundle/jniLibs
          
          # Create proper JNI structure with ABI directories
          declare -A abi_map=(
            ["android-arm64"]="arm64-v8a"
            ["android-arm32"]="armeabi-v7a"
            ["android-x64"]="x86_64"
            ["android-x86"]="x86"
          )
          
          for platform in android-arm64 android-arm32 android-x64 android-x86; do
            abi=${abi_map[$platform]}
            mkdir -p pkg-bundle/jniLibs/$abi
            cp _artifacts/$platform/libhighs.so pkg-bundle/jniLibs/$abi/
            echo "Copied $platform -> $abi"
          done

      - name: Create bundle zip
        run: |
          (cd pkg-bundle && zip -r ../${{ env.BUNDLE_PACKAGE_NAME }}.zip .)

      - name: Upload bundle package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUNDLE_PACKAGE_NAME }}
          path: ${{ env.BUNDLE_PACKAGE_NAME }}.zip

  package-legacy:
    name: Package Legacy Android Layout
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Package legacy layout
        run: |
          mkdir -p pkg-legacy/android/src/main/jniLibs
          
          # Create legacy plugin layout
          declare -A abi_map=(
            ["android-arm64"]="arm64-v8a"
            ["android-arm32"]="armeabi-v7a"
            ["android-x64"]="x86_64"
            ["android-x86"]="x86"
          )
          
          for platform in android-arm64 android-arm32 android-x64 android-x86; do
            abi=${abi_map[$platform]}
            mkdir -p pkg-legacy/android/src/main/jniLibs/$abi
            cp _artifacts/$platform/libhighs.so pkg-legacy/android/src/main/jniLibs/$abi/
            echo "Copied $platform -> $abi"
          done

      - name: Create legacy zip
        run: |
          (cd pkg-legacy && zip -r ../${{ env.PACKAGE_NAME }}.zip .)

      - name: Upload legacy package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}.zip

  release:
    name: Create Android Release
    needs: [package-individual, package-bundle, package-legacy]
    runs-on: ubuntu-22.04
    steps:
      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          path: _packages

      - name: List packages
        run: find _packages -type f -name "*.zip" | sort

      - name: Create Android release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: android-v${{ github.run_number }}-${{ github.sha }}
          name: HiGHS Android Libraries
          body: |
            HiGHS prebuilt libraries for Android platforms
            
            This release contains native libraries for all Android ABIs:
            - arm64-v8a (Android 64-bit ARM)
            - armeabi-v7a (Android 32-bit ARM) 
            - x86_64 (Android 64-bit Intel)
            - x86 (Android 32-bit Intel)
            
            **Package Options:**
            
            ðŸ“± **JNI Bundle (Recommended)**: `${{ env.BUNDLE_PACKAGE_NAME }}.zip`
            ```
            jniLibs/
            â”œâ”€â”€ arm64-v8a/libhighs.so
            â”œâ”€â”€ armeabi-v7a/libhighs.so
            â”œâ”€â”€ x86/libhighs.so
            â””â”€â”€ x86_64/libhighs.so
            ```
            Ready to extract into your Android project's `src/main/jniLibs/` directory.
            
            ðŸ”§ **Legacy Plugin Layout**: `${{ env.PACKAGE_NAME }}.zip`
            Contains the traditional `android/src/main/jniLibs/` structure for Flutter plugins.
            
            ðŸ“¦ **Individual Libraries**: `${{ env.PACKAGE_NAME }}-individual.zip`
            Separate directories for each platform if you need to handle them individually.
            
            **Usage:**
            For most Android projects, download the JNI Bundle and extract it to your project.
            
            Generated from commit: ${{ github.sha }}
            Build configuration: ${{ env.BUILD_CONFIG }}
          files: |
            _packages/${{ env.BUNDLE_PACKAGE_NAME }}/${{ env.BUNDLE_PACKAGE_NAME }}.zip
            _packages/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}.zip
            _packages/${{ env.PACKAGE_NAME }}-individual/${{ env.PACKAGE_NAME }}-individual.zip
          draft: false
          prerelease: false