name: Build All HiGHS Platforms

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for triggering all platform builds'
        required: false
        default: 'Manual trigger for all platforms'
      build_config:
        description: 'Build configuration'
        required: false
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug

env:
  BUILD_CONFIG: ${{ github.event.inputs.build_config || 'Release' }}

jobs:
  # Trigger all platform builds - each will create their own release
  build-ios:
    uses: ./.github/workflows/build-ios.yml
    
  build-android:  
    uses: ./.github/workflows/build-android.yml
    
  build-macos:
    uses: ./.github/workflows/build-macos.yml
    
  build-windows:
    uses: ./.github/workflows/build-windows.yml
    
  build-linux:
    uses: ./.github/workflows/build-linux.yml
    
  build-includes:
    uses: ./.github/workflows/build-includes.yml

  summary:
    name: Build Summary
    needs: [build-ios, build-android, build-macos, build-windows, build-linux, build-includes]
    runs-on: ubuntu-22.04
    steps:
      - name: Generate comprehensive summary
        run: |
          cat << 'EOF'
          # 🚀 HiGHS Complete Build Summary
          
          ✅ **All platform builds completed successfully!**
          
          ## 📦 Platform-Specific Releases Created:
          
          ### 📱 iOS (`ios-v${{ github.run_number }}-${{ github.sha }}`)
          - **XCFramework**: Universal framework for iOS development
          - **Individual Libraries**: Separate ARM64 device and simulator libraries
          - **Supports**: iOS 12.0+, Xcode 12+
          
          ### 🤖 Android (`android-v${{ github.run_number }}-${{ github.sha }}`)
          - **JNI Bundle**: Ready-to-use `jniLibs/` structure  
          - **Individual Libraries**: Per-architecture libraries
          - **Legacy Layout**: Flutter plugin compatible structure
          - **ABIs**: arm64-v8a, armeabi-v7a, x86_64, x86
          
          ### 🍎 macOS (`macos-v${{ github.run_number }}-${{ github.sha }}`)
          - **Universal Binary**: Apple Silicon (ARM64) + Intel (x86_64)
          - **Format**: `.dylib` shared library
          - **Supports**: macOS 11.0+ (Big Sur and later)
          
          ### 🪟 Windows (`windows-v${{ github.run_number }}-${{ github.sha }}`)
          - **Platform**: x64 DLL
          - **Compatibility**: Visual Studio 2019+, MinGW-w64
          - **Supports**: Windows 10 and later
          
          ### 🐧 Linux (`linux-v${{ github.run_number }}-${{ github.sha }}`)
          - **Platform**: x64 shared library  
          - **Format**: `.so` shared library
          - **Compatibility**: Most Linux distributions (Ubuntu 18.04+, CentOS 7+)
          
          ### 📄 C++ Headers (`includes-v${{ github.run_number }}-${{ github.sha }}`)
          - **Complete Headers**: All necessary headers for development
          - **Documentation**: Directory structure and usage guide
          - **Generated Config**: Build-time configuration included
          
          ## 🛠️ Build Details:
          - **Configuration**: ${{ env.BUILD_CONFIG }}
          - **Trigger Reason**: ${{ github.event.inputs.reason || 'Automated build' }}
          - **Commit**: ${{ github.sha }}
          - **Build Number**: #${{ github.run_number }}
          
          ## 📋 Usage Instructions:
          
          Each platform release includes detailed usage instructions and examples.
          Download the appropriate package for your target platform(s).
          
          **For Cross-Platform Development:**
          1. Download the includes package for headers
          2. Download platform-specific library packages as needed
          3. Follow the usage instructions in each release
          
          ## 🔗 Integration Examples:
          
          **CMake:**
          ```cmake
          find_library(HIGHS_LIB highs PATHS path/to/platform/lib)
          target_include_directories(your_target PRIVATE path/to/includes)
          target_link_libraries(your_target ${HIGHS_LIB})
          ```
          
          **Flutter/Dart:**
          The packages are specifically structured for easy integration with Flutter plugins and Dart FFI.
          
          ---
          
          🎉 **Ready for production use across all supported platforms!**
          EOF

      - name: Create summary badge
        run: |
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
          echo "PLATFORMS_BUILT=6" >> $GITHUB_ENV
          echo "BUILD_CONFIG=${{ env.BUILD_CONFIG }}" >> $GITHUB_ENV
