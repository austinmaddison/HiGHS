name: Build libhighs for Windows

on:
  workflow_dispatch:
  push:
    paths:
      - "CMakeLists.txt"
      - "cmake/**"
      - ".github/workflows/build-windows.yml"
      - "highs/**"
      - "build_scripts/**"
      - "build.py"

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  PYTHON_VERSION: "3.11"
  BUILD_CONFIG: "Release"
  PACKAGE_NAME: "dart-highs-prebuilt-lib-windows"

jobs:
  build:
    name: Windows x64
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v2

      - name: Build using build script
        run: |
          python build.py build windows-x64 --config ${{ env.BUILD_CONFIG }} --extract-libs

      - name: Upload library artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: highs_patched/build-windows-x64/highs.dll

  package:
    name: Package Windows Library
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Package library
        run: |
          mkdir -p pkg/windows
          cp _artifacts/windows-x64/highs.dll pkg/windows/

      - name: Create zip
        run: |
          (cd pkg && zip -r ../${{ env.PACKAGE_NAME }}.zip .)

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}.zip

      - name: Create Windows release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: windows-v${{ github.run_number }}-${{ github.sha }}
          name: HiGHS Windows x64 Library
          body: |
            HiGHS prebuilt library for Windows x64
            
            This release contains:
            - Windows x64 DLL ready for linking
            - Compatible with Visual Studio 2019+ and mingw-w64
            - Supports Windows 10 and later
            
            **Usage:**
            ```batch
            REM Extract the zip file
            unzip ${{ env.PACKAGE_NAME }}.zip
            
            REM Link against the library (Visual Studio example)
            cl your_app.c /link /LIBPATH:windows highs.lib
            
            REM Or using MinGW
            gcc -Lwindows -lhighs your_app.c -o your_app.exe
            ```
            
            **Runtime Requirements:**
            - The `highs.dll` must be in the same directory as your executable
            - Or in a directory listed in your system PATH
            - Or you can use `LoadLibrary()` to load from a specific path
            
            **Development:**
            - You'll need the corresponding `.lib` import library for linking
            - Header files are available in the separate "includes" release
            
            Generated from commit: ${{ github.sha }}
            Build configuration: ${{ env.BUILD_CONFIG }}
          files: ${{ env.PACKAGE_NAME }}.zip
          draft: false
          prerelease: false
