name: Build HiGHS Includes Package

on:
  workflow_dispatch:
  push:
    paths:
      - "CMakeLists.txt"
      - "cmake/**"
      - ".github/workflows/build-includes.yml"
      - "highs/**"

env:
  PYTHON_VERSION: "3.11"
  PACKAGE_NAME: "highs-includes"

jobs:
  package-includes:
    name: Package HiGHS Includes
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build

      - name: Configure project to generate HConfig.h
        working-directory: ./highs_patched
        run: |
          cmake -B build-temp -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DFAST_BUILD=ON

      - name: Package includes
        working-directory: ./highs_patched
        run: |
          set -e
          mkdir -p pkg/include/highs
          
          # Copy main header
          cp highs/Highs.h pkg/include/highs/
          
          # Copy generated config header
          cp build-temp/HConfig.h pkg/include/highs/
          
          # Copy all other headers maintaining directory structure
          cd highs
          find . -name "*.h" -o -name "*.hpp" | while read -r header; do
            # Skip the main Highs.h as it's already copied
            if [[ "$header" != "./Highs.h" ]]; then
              dir=$(dirname "$header")
              mkdir -p "../pkg/include/highs/$dir"
              cp "$header" "../pkg/include/highs/$header"
            fi
          done
          cd ..
          
          # Copy extern headers that are referenced
          mkdir -p pkg/include/highs/extern/filereaderlp
          cp extern/filereaderlp/builder.hpp pkg/include/highs/extern/filereaderlp/
          cp extern/filereaderlp/def.hpp pkg/include/highs/extern/filereaderlp/
          cp extern/filereaderlp/model.hpp pkg/include/highs/extern/filereaderlp/
          cp extern/filereaderlp/reader.hpp pkg/include/highs/extern/filereaderlp/
          
          mkdir -p pkg/include/highs/extern/pdqsort
          cp extern/pdqsort/pdqsort.h pkg/include/highs/extern/pdqsort/
          
          mkdir -p pkg/include/highs/extern/zstr
          cp extern/zstr/strict_fstream.hpp pkg/include/highs/extern/zstr/
          cp extern/zstr/zstr.hpp pkg/include/highs/extern/zstr/

      - name: Create directory structure documentation
        working-directory: ./highs_patched
        run: |
          cat > pkg/STRUCTURE.md << 'EOF'
          # HiGHS Headers Directory Structure
          
          This package contains all the header files needed to compile against HiGHS.
          
          ## Main API
          - `include/highs/Highs.h` - Main API header (include this in your code)
          - `include/highs/HConfig.h` - Generated configuration header
          
          ## Directory Structure
          ```
          include/highs/
          ‚îú‚îÄ‚îÄ Highs.h                    # Main API
          ‚îú‚îÄ‚îÄ HConfig.h                  # Generated config
          ‚îú‚îÄ‚îÄ interfaces/                # C API and other interfaces
          ‚îú‚îÄ‚îÄ io/                       # I/O functionality
          ‚îú‚îÄ‚îÄ ipm/                      # Interior Point Method
          ‚îú‚îÄ‚îÄ lp_data/                  # LP data structures
          ‚îú‚îÄ‚îÄ mip/                      # Mixed Integer Programming
          ‚îú‚îÄ‚îÄ model/                    # Model classes
          ‚îú‚îÄ‚îÄ parallel/                 # Parallel processing
          ‚îú‚îÄ‚îÄ pdlp/                     # Primal-Dual LP
          ‚îú‚îÄ‚îÄ presolve/                 # Presolving
          ‚îú‚îÄ‚îÄ qpsolver/                 # Quadratic Programming
          ‚îú‚îÄ‚îÄ simplex/                  # Simplex method
          ‚îú‚îÄ‚îÄ test/                     # Test utilities
          ‚îú‚îÄ‚îÄ util/                     # Utilities
          ‚îî‚îÄ‚îÄ extern/                   # External dependencies
              ‚îú‚îÄ‚îÄ filereaderlp/         # File reader
              ‚îú‚îÄ‚îÄ pdqsort/             # Pattern-defeating quicksort
              ‚îî‚îÄ‚îÄ zstr/                # Compressed streams
          ```
          
          ## Usage
          Add the `include/` directory to your compiler's include path:
          
          ```cpp
          #include <highs/Highs.h>
          
          int main() {
              Highs highs;
              // Your code here
              return 0;
          }
          ```
          
          ## Compiler Flags
          ```bash
          g++ -I./include your_app.cpp -lhighs -o your_app
          ```
          EOF

      - name: List package contents
        working-directory: ./highs_patched
        run: |
          echo "Package contents:"
          find pkg -type f | sort

      - name: Zip includes package
        working-directory: ./highs_patched
        run: |
          (cd pkg && zip -r ../${{ env.PACKAGE_NAME }}.zip .)

      - name: Upload includes artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: highs_patched/${{ env.PACKAGE_NAME }}.zip

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: includes-v${{ github.run_number }}-${{ github.sha }}
          name: HiGHS C++ Headers Package
          body: |
            HiGHS C++ header files package
            
            This release contains all the header files needed to compile against HiGHS.
            
            **Contents:**
            - üìÅ **Main API**: `include/highs/Highs.h` - The primary header you'll include
            - ‚öôÔ∏è **Generated config**: `include/highs/HConfig.h` - Build-time configuration
            - üèóÔ∏è **All supporting headers** with proper directory structure preserved
            - üìö **External dependencies** headers included
            - üìã **Directory structure documentation**: `STRUCTURE.md`
            
            **Quick Start:**
            ```bash
            # Extract the package
            unzip ${{ env.PACKAGE_NAME }}.zip
            
            # Compile your project
            g++ -I./include your_app.cpp -lhighs -o your_app
            ```
            
            **In your C++ code:**
            ```cpp
            #include <highs/Highs.h>
            
            int main() {
                Highs highs;
                // Use HiGHS API...
                return 0;
            }
            ```
            
            **CMake Integration:**
            ```cmake
            target_include_directories(your_target PRIVATE path/to/include)
            target_link_libraries(your_target highs)
            ```
            
            This package pairs with the platform-specific library releases to provide everything needed for HiGHS development.
            
            Generated from commit: ${{ github.sha }}
          files: highs_patched/${{ env.PACKAGE_NAME }}.zip
          draft: false
          prerelease: false
